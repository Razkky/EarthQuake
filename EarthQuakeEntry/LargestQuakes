package SearchingEarthquakeDataStarterProgram;

import java.util.*;
/**
 * Write a description of LargestQuakes here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
public class LargestQuakes {
    public void findLargestQuakes(){
        EarthQuakeParser parser = new EarthQuakeParser();
        //String source = "http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.atom";
        String source = "";
        ArrayList<QuakeEntry> list  = parser.read(source);
        /*for(QuakeEntry qe: list){
            System.out.println(qe);
        }*/
        System.out.println("read data for "+list.size()+" quakes");
        int index = indexOfLargest(list);
        System.out.println(index + " " + list.get(index).getMagnitude());
        ArrayList<QuakeEntry> largestQuakes = getLargest(list,3);
        for(QuakeEntry qe: largestQuakes){
            System.out.println(qe);
        }
        System.out.println(largestQuakes.size());
    }
    public int indexOfLargest(ArrayList<QuakeEntry> data){
        int index = 0;
        double largest =0;
        for(int k=0; k<data.size(); k++){
            if(data.get(k).getMagnitude() > largest){
                index = k;
                
                largest = data.get(k).getMagnitude();
            }
        }
        return index;
    }
    public ArrayList<QuakeEntry> getLargest(ArrayList<QuakeEntry> quakedata, int howMany){
      ArrayList<QuakeEntry> largestQuake = new ArrayList<QuakeEntry>();  
      ArrayList<QuakeEntry> copy = new ArrayList<QuakeEntry>(quakedata);
      double largest = 0;
      int index =0;
      for(int k=0; k<howMany; k++){
          if(copy.size()!=0){
          for(int i= 0; i< copy.size(); i++){
              if(copy.get(i).getMagnitude() > largest){
                  largest = copy.get(i).getMagnitude();
                  index = i;
                  
              }                                                
          }
          largestQuake.add(copy.get(index));
          copy.remove(index);
          largest = 0;
          
        }
       }
      return largestQuake;
    }
}
