package SearchingEarthquakeDataStarterProgram;

import java.util.*;
import edu.duke.*;

public class EarthQuakeClient {
    public EarthQuakeClient() {
        // TODO Auto-generated constructor stub
    }

    public ArrayList<QuakeEntry> filterByMagnitude(ArrayList<QuakeEntry> quakeData,
    double magMin) {
        ArrayList<QuakeEntry> answer = new ArrayList<QuakeEntry>();
        // TODO
        for(QuakeEntry qe : quakeData){
            if(qe.getMagnitude() > magMin){
                answer.add(qe);
            }
        }
        return answer;
    }
    public ArrayList<QuakeEntry> filterByDistanceFrom(ArrayList<QuakeEntry> quakeData,
    double distMax,
    Location from) {
        ArrayList<QuakeEntry> answer = new ArrayList<QuakeEntry>();
        ArrayList<QuakeEntry> data = new ArrayList<QuakeEntry>(quakeData);
        // TODO
        int minIndex =0;
        for(int k=0; k<data.size(); k++){
            double distance = data.get(k).getLocation().distanceTo(from)/1000;
            //System.out.println(distance);
            if(distance < distMax){
                answer.add(data.get(k));
            }
        }
        return answer;
    }
    public void dumpCSV(ArrayList<QuakeEntry> list){
        System.out.println("Latitude,Longitude,Magnitude,Info");
        for(QuakeEntry qe : list){
            System.out.printf("%4.2f,%4.2f,%4.2f,%s\n",
                qe.getLocation().getLatitude(),
                qe.getLocation().getLongitude(),
                qe.getMagnitude(),
                qe.getInfo());
        }

    }

    public void bigQuakes() {
        EarthQuakeParser parser = new EarthQuakeParser();
        //String source = "http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.atom";
        String source = "data/nov20quakedata.atom";
        ArrayList<QuakeEntry> list  = parser.read(source);
        ArrayList<QuakeEntry> bigQuakes = filterByMagnitude(list, 5);
        for(QuakeEntry qe : bigQuakes){
            System.out.println(qe);
        }
        System.out.println("found "+ bigQuakes.size() +" that match that criteria");

    }

    public void closeToMe(){
        EarthQuakeParser parser = new EarthQuakeParser();
        //String source = "http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.atom";
        String source = "";
        ArrayList<QuakeEntry> list  = parser.read(source);
        System.out.println("read data for "+list.size()+" quakes");
        
        
        // This location is Bridgeport, CA
         Location city =  new Location(38.17, -118.82);
        ArrayList<QuakeEntry> Min = filterByDistanceFrom(list, 1000, city);
        System.out.println("starting " + Min.size());
        for(int k=0; k<Min.size(); k++){
            double distance = Min.get(k).getLocation().distanceTo(city);
            System.out.println(distance/1000 + " " + Min.get(k).getInfo());
            
        }
        // TODO
    }

    public void createCSV(){
        EarthQuakeParser parser = new EarthQuakeParser();
        String source = "data/nov20quakedatasmall.atom";
        //String source = "http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.atom";
        ArrayList<QuakeEntry> list  = parser.read(source);
        dumpCSV(list);
        System.out.println("# quakes read: " + list.size());
        //for (QuakeEntry qe : list) {
            //System.out.println(qe);
        //}
    }
    public ArrayList<QuakeEntry> getClosest(ArrayList<QuakeEntry>list, Location current, int howMany){
        ArrayList<QuakeEntry> copy = new ArrayList<QuakeEntry>(list);
        int minIndex = 0;
        ArrayList<QuakeEntry> ret = new ArrayList<QuakeEntry>();
        for(int i = 0; i<howMany; i++){
            
            for(int k = 0; k< copy.size(); k++){
                QuakeEntry refrence = copy.get(k);
                Location closest = refrence.getLocation();
                if(closest.distanceTo(current) < copy.get(minIndex).getLocation().distanceTo(current)){
                    minIndex = k;
                }
            }
            ret.add(copy.get(minIndex));
            copy.remove(minIndex);
        }
        return ret;
    }
    public ArrayList<QuakeEntry> filterByDepth(ArrayList<QuakeEntry> quakeData, double minDepth, double maxDepth){
        ArrayList<QuakeEntry> list = new ArrayList<QuakeEntry>();
        for(int k=0; k<quakeData.size(); k++){
            double depth = quakeData.get(k).getDepth();
            if(minDepth < depth && depth < maxDepth){
                list.add(quakeData.get(k));
            }
        }
        return list;
    }
    public void quakeOfDepth(){
        EarthQuakeParser parser = new EarthQuakeParser();
        String source = " ";
        ArrayList<QuakeEntry> list = parser.read(source);
        ArrayList<QuakeEntry> depth = filterByDepth(list, -10000.0, -8000.0);
        System.out.println("total depth " + depth.size());
        for(int k=0; k<depth.size(); k++){
            System.out.println(depth.get(k));
        }
    }
    public ArrayList<QuakeEntry> filterByPhrase(ArrayList<QuakeEntry> quakeData, String where, String phrase){
        ArrayList<QuakeEntry> answer = new ArrayList<QuakeEntry>();
        ArrayList<QuakeEntry> copy = new ArrayList<QuakeEntry>(quakeData);
        for(QuakeEntry qe : copy ){
            String info = qe.getInfo();
            if(where.equals("start")){
                if(info.startsWith(phrase)){
                    answer.add(qe);
                }
            }
            if(where.equals("end")){
                if(info.endsWith(phrase)){
                    answer.add(qe);
                }
            }
            if(where.equals("any")){
                if(info.contains(phrase)){
                    answer.add(qe);
                }
            }
        }
        return answer;
    }
    public void quakeByPhrase(){
        EarthQuakeParser parser = new EarthQuakeParser();
        String source = " ";
        ArrayList<QuakeEntry> list = parser.read(source);
        ArrayList<QuakeEntry> phrase = filterByPhrase(list, "any", "Creek" );
        System.out.println("quake size " + phrase.size());
        for(QuakeEntry qe: phrase){
            System.out.println(qe);
        }
    }
    public void findClosestQuakes(){
        EarthQuakeParser parser = new EarthQuakeParser();
        //String source = "http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.atom";
        String source = "";
        ArrayList<QuakeEntry> list  = parser.read(source);
        System.out.println("read data for "+list.size()+" quakes");
        // This location is Durham, NC
        //Location city = new Location(35.988, -78.907);
        Location jakarta = new Location(-6.211, 106.845);
        ArrayList<QuakeEntry> closest = getClosest(list, jakarta, 3);
        for(QuakeEntry qe : closest){
            System.out.println(qe.getLocation().distanceTo(jakarta)/1000 + " " + qe.getInfo());
        }
    }
    
}
